PHY607 - Computational Physics 

Group: Fangyi Guo, Julia Baumgarten

Pseudocode

We start by establishing the libraries we need, namely numpy, matplotlib
Establish variables for initial conditions for position and velocity in x and y direction, mass, gravity, drag, and a time step.
Set up list for initial velocity and position that consists of position and velocity in x and y direction. 
Now functions are defined:
Force function takes position and velocity as input and computes gravity and drag force. Drag force comes from a separate function that needs to take into consideration if the object is moving or not or if drag is zero, then it returns a zero force. The function returns total force on the cow, which is the sum of drag and gravity.
Energy function takes position and velocity as input and gives potential energy, kinetic energy, and their sum, the total energy as output. Making sure there is no negative potential energy after impact by using max of vertical position.
Step function for integration takes position, velocity, force, and time step as input and calculates new position and velocity after a time step. Semi-implicit Euler, which means velocity is updated first and then position using that velocity. Newton's Second Law for acceleration vector.
For the main simulation loop, t starts at 0 when cow is at initial position and velocity. Initial values are noted and lists store time history. The loop completes the following until the cow reaches the ground (y>0):
Computes total force
Position and velocity are updated given the time step
Time step is increased
New values are noted for velocity, position, energy
Interpolation function to check if cow reached ground for exact impact
Accept new position, velocity, and time and record into history. 
Convert lists to arrays.
The output is time, velocity, position, and energy throughout the fall. These are used to plot trajectory (x vs y), height vs. time, velocity vs. time, and energies vs. time to help answer the questions.

We will answer the questions with our code in the following. 

Questions:
i. Is energy conserved as a function of time? To what level of precision?

    As total energy is plotted in the energy vs. time graph (green), a downward slope of the curve can be observed as time progresses. This indicates that energy is not conserved due to the nontrivial air resistance. Given the values m=1000kg, drag constant = 5 N/(m/s)^2 and the initial conditions (x0, y0)=(0, 10), (vx0, vy0)=(2, 3), our result for the initial energy is 104600J and the final energy is 99808J. This gives a 4.58% decrease in energy. 

ii. How does the trajectory change if you change the time step? What about as you make the time step approach zero?
    As is shown in the figures, for the time step equal to 1, the plot has clear sharp corners. For the time step equal to 0.01, the plot becomes much more smooth, and for the time step equal to 0.0001, the plot is even more smooth. Hence, the smaller the time step, the closer it gets to the exact continuous trajectory. In the limit where the time step is zero, the computational result would match perfectly with the analytic result. 

iii. How does your trajectory compare to the analytic solution if you set air resistance to zero?
    The analytic solution predicts that the landing point is at (3.532m, 0m), while our code yields the landing point at (3.509m, -0.077m). The small negative y arises from the method of discretization, which would not be exactly zero unless the time step is zero or a better algorithm is used. The x coordinate deviates from the analytic result by a percentage of 0.65%, which shows consistency between our computational result and the analytic solution with high reliability.
